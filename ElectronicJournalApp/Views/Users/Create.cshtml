@model ElectronicJournalsApi.Models.User

@{
    ViewData["Title"] = "Create";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New User</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
    <style>
        .text-primary {
            color: #F7911D;
        }
        .text-secondary {
            color: #1A1D27;
        }
        .text-accent {
            color: #1B9AAA;
        }
        .text-light {
            color: #EDFCF5;
        }
        .alert {
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
            display: none; /* Скрываем по умолчанию */
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
        }
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
        }
        .mb-2 {
            margin-bottom: 0.5rem; /* Уменьшение расстояния между полями */
        }
    </style>
</head>
<body>
    <div class="container mx-auto p-8">
        <div class="bg-white p-8 rounded-lg shadow-lg max-w-lg mx-auto">
            <h2 class="text-3xl font-bold mb-6 text-center text-secondary">Создание нового пользователя</h2>
            <form id="createUserForm">
                <div class="mb-2">
                    <label for="surname" class="block text-secondary font-semibold mb-1">Фамилия </label>
                    <input type="text" id="surname" name="surname" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none">
                </div>
                <div class="mb-2">
                    <label for="name" class="block text-secondary font-semibold mb-1">Имя </label>
                    <input type="text" id="name" name="name" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none">
                </div>
                <div class="mb-2">
                    <label for="patronymic" class="block text-secondary font-semibold mb-1">Отчество</label>
                    <input type="text" id="patronymic" name="patronymic" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none">
                </div>
                <div class="mb-2">
                    <label for="login" class="block text-secondary font-semibold mb-1">Логин <span class="required">*</span></label>
                    <input type="text" id="login" name="login" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none" required>
                </div>
                <div class="mb-2">
                    <label for="password" class="block text-secondary font-semibold mb-1">Пароль <span class="required">*</span></label>
                    <input type="password" id="password" name="password" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none" required>
                </div>
                <div class="mb-2">
                    <label for="phone" class="block text-secondary font-semibold mb-1">Телефон</label>
                                        <input type="text" id="phone" name="phone" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none">
                </div>
                <div class="mb-2">
                    <label for="birthdate" class="block text-secondary font-semibold mb-1">Дата рождения</label>
                    <input type="date" id="birthdate" name="birthdate" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none ">
                </div>
                <div class="mb-4">
                    <label for="role" class="block text-secondary font-semibold mb-1">Роль <span class="required">*</span></label>
                    <select id="role" name="role" class="appearance-none border rounded w-full py-2 px-3 text-secondary leading-tight focus:outline-none" required>
                        <option value="">Выберите роль</option>
                        <!-- Роли будут загружены сюда -->
                    </select>
                </div>
                <div id="alert" class="alert mt-4"></div> 
                <div class="flex items-center justify-between">
                    <button type="submit" class="btn btn-custom text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Добавить
                    </button>
                    <a href="/Users/Index" class="inline-block align-baseline font-bold text-sm text-accent hover:text-primary">
                        Вернуться к списку
                    </a>
                </div>
            </form>
        </div>
    </div>

<script>
    // Функция для загрузки ролей из API
    async function loadRoles() {
        try {
            const response = await fetch('https://localhost:7022/api/users/roles'); // Замените на ваш URL
            if (response.ok) {
                const roles = await response.json();
                const roleSelect = document.getElementById('role');
                roles.forEach(role => {
                    const option = document.createElement('option');
                    option.value = role;
                    option.textContent = role.charAt(0).toUpperCase() + role.slice(1); // Форматируем текст
                    roleSelect.appendChild(option);
                });
            } else {
                console.error('Error fetching roles:', response.statusText);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    // Загружаем роли при загрузке страницы
    window.onload = loadRoles;

    document.getElementById('createUserForm').addEventListener('submit', async function (event) {
        event.preventDefault(); // Предотвращаем стандартное поведение формы

        const formData = {
            UserDto: {
                Surname: document.getElementById('surname').value,
                Name: document.getElementById('name').value,
                Patronymic: document.getElementById('patronymic').value ,
                Login: document.getElementById('login').value,
                PasswordString: document.getElementById('password').value,
                Phone: document.getElementById('phone').value,
                BirthDate: document.getElementById('birthdate').value || null,
                Role: document.getElementById('role').value
            }
        };

            console.log(formData)

        // Дополнительные проверки данных
        const validationErrors = [];

        // Проверка формата телефона (пример: только цифры, длина 10-15)
        const phoneRegex = /^\+?\d\s?\d{3}\s?\d{3}[-]?\d{2}[-]?\d{2}$/;
            if (formData.UserDto.Phone && !phoneRegex.test(formData.UserDto.Phone)) {
            validationErrors.push('Неверный формат номера телефона.');
        }

              // Проверка даты рождения (должна быть в прошлом)
        const currentDate = new Date();
        if (formData.UserDto.BirthDate) {
          const birthDate = new Date(formData.UserDto.BirthDate);
          if (birthDate > currentDate) {
            validationErrors.push('Дата рождения не может быть в будущем.');
          }
        }

              // Проверка длины пароля (например, минимум 6 символов)
            if (formData.UserDto.PasswordString && formData.UserDto.PasswordString.length < 6) {
            validationErrors.push('Пароль должен содержать минимум 6 символов.');
        }

        // Если есть ошибки валидации, выводим их и прекращаем отправку формы
        if (validationErrors.length > 0) {
            showAlert(validationErrors.join(' '), 'error');
            return;
        }

            console.log('Отправляемые данные формы:', JSON.stringify(formData.UserDto));

        try {
                const response = await fetch('https://localhost:7022/api/Users/PostUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                    body: JSON.stringify(formData.UserDto)
            });

            // Логируем ответ
            console.log('Response status:', response.status);

            if (response.ok) {
                const result = await response.json();
                    showAlert(result.Message || 'Пользователь успешно создан.', 'success');
                    document.getElementById('createUserForm').reset();
            } else {
                const errorResponse = await response.json();
                    console.error('Ошибка от сервера:', errorResponse);
                    showAlert(errorResponse.Message || errorResponse.message, 'error');
            }
        }
        catch (error) {
            console.error('Error:', error);
            showAlert('При создании пользователя произошла ошибка.', 'error');
        }
    });

        // Функция для отображения уведомлений
        function showAlert(message, type) {
            const alertBox = document.getElementById('alert');
            alertBox.textContent = message;
            alertBox.className = 'alert ' + (type === 'success' ? 'alert-success' : 'alert-error');
            alertBox.style.display = 'block'; // Показываем уведомление
            // Скрываем уведомление через 10 секунд
            setTimeout(() => {
                alertBox.style.display = 'none';
            }, 10000);
        }
    </script>
</body>

